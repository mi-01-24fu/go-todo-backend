// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/signup/access_sign_up.go

// Package signup is a generated GoMock package.
package signup

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
//		"github.com/mi-01-24fu/go-todo-backend/internal/infrastructure/signup"
)

// MockAccessSignUp is a mock of AccessSignUp interface.
type MockAccessSignUp struct {
	ctrl     *gomock.Controller
	recorder *MockAccessSignUpMockRecorder
}

// MockAccessSignUpMockRecorder is the mock recorder for MockAccessSignUp.
type MockAccessSignUpMockRecorder struct {
	mock *MockAccessSignUp
}

// NewMockAccessSignUp creates a new mock instance.
func NewMockAccessSignUp(ctrl *gomock.Controller) *MockAccessSignUp {
	mock := &MockAccessSignUp{ctrl: ctrl}
	mock.recorder = &MockAccessSignUpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessSignUp) EXPECT() *MockAccessSignUpMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockAccessSignUp) SignUp(arg0 NewMemberInfo) (VerifySignUpResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0)
	ret0, _ := ret[0].(VerifySignUpResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAccessSignUpMockRecorder) SignUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAccessSignUp)(nil).SignUp), arg0)
}
